name: Build Android APK

on:
  push:
    branches: [main]
    tags:
      - '*'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      - name: Install Android SDK
        uses: android-actions/setup-android@v3

      - name: Make gradlew executable
        run: chmod +x android/gradlew

      - name: Gradle clean
        run: |
          cd android
          ./gradlew clean
          cd ..
        shell: bash

      - name: Generate Codegen Artifacts
        run: |
          cd android
          ./gradlew generateCodegenArtifactsFromSchema --rerun-tasks
          cd ..
        shell: bash

      - name: Gradle preBuild (generate autolinking files)
        run: |
          cd android
          ./gradlew :app:preBuild
          cd ..
        shell: bash

      - name: Build release APK
        run: ./gradlew assembleRelease
        working-directory: android
        shell: bash

      - name: Set APK version suffix
        id: apk_version_bash
        run: |
          if [[ "${GITHUB_REF_NAME}" != "" && "${GITHUB_REF}" == refs/tags/* ]]; then
            echo "suffix=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT
          else
            echo "suffix=${GITHUB_RUN_NUMBER}" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Rename APK with version
        run: |
          mv android/app/build/outputs/apk/release/app-release.apk android/app/build/outputs/apk/release/app-release-${{ steps.apk_version_bash.outputs.suffix }}.apk
        shell: bash

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-release-apk-${{ steps.apk_version_bash.outputs.suffix }}
          path: |
            android/app/build/outputs/apk/release/app-release-${{ steps.apk_version_bash.outputs.suffix }}.apk
          retention-days: 3

      - name: Send APK to Telegram group (on tag release)
        if: startsWith(github.ref, 'refs/tags/')
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: -1002769415296
        run: |
          apkUrl="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          url="https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage"
          curl -s -X POST $url -d chat_id=${TELEGRAM_CHAT_ID} -d text="New APK release: ${{ github.ref_name }}`nDownload: $apkUrl"
        shell: bash

      - name: Upload APK to Vercel Blob Storage
        if: startsWith(github.ref, 'refs/tags/')
        env:
          VERCEL_BLOB_TOKEN: ${{ secrets.VERCEL_BLOB_TOKEN }}
        run: |
          npm install @vercel/blob
          apkPath="android/app/build/outputs/apk/release/app-release-${{ steps.apk_version_bash.outputs.suffix }}.apk"
          apkUrl=$(node scripts/upload-apk-to-vercel-blob.js $apkPath)
          echo "APK_DOWNLOAD_URL=$apkUrl" >> $GITHUB_ENV
        shell: bash

      - name: Get artifact ID (on tag release)
        if: startsWith(github.ref, 'refs/tags/')
        id: artifact_info_tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          artifact_id=$(gh api repos/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}/artifacts --jq '.artifacts[] | select(.name=="app-release-apk-${{ steps.apk_version_bash.outputs.suffix }}") | .id')
          echo "artifact_id=$artifact_id" >> $GITHUB_OUTPUT

      - name: Send APK link to Telegram group (on tag release)
        if: startsWith(github.ref, 'refs/tags/')
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: -1002769415296
        run: |
          artifact_id="${{ steps.artifact_info_tag.outputs.artifact_id }}"
          apkUrl="${APK_DOWNLOAD_URL}"
          artifactUrl="https://github.com/${{ github.repository }}/actions/artifacts/$artifact_id"
          url="https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage"
          curl -s -X POST $url -d chat_id=${TELEGRAM_CHAT_ID} -d text="New APK release: ${{ github.ref_name }}%0ADownload: $apkUrl%0AArtifact: $artifactUrl"
        shell: bash

      - name: Install MongoDB Node.js driver
        run: npm install mongodb

      - name: Save major release info to MongoDB
        if: startsWith(github.ref, 'refs/tags/')
        env:
          MONGODB_URL: ${{ secrets.MONGODB_URL }}
        run: |
          node scripts/save-release-to-mongodb.js "$APK_DOWNLOAD_URL" "major" "${{ github.ref_name }}"

      - name: Get artifact ID (on minor release)
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        id: artifact_info_minor
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          artifact_id=$(gh api repos/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}/artifacts --jq '.artifacts[] | select(.name=="app-release-apk-${{ steps.apk_version_bash.outputs.suffix }}") | .id')
          echo "artifact_id=$artifact_id" >> $GITHUB_OUTPUT

      - name: Save minor release info to MongoDB
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        env:
          MONGODB_URL: ${{ secrets.MONGODB_URL }}
        run: |
          artifactUrl="https://github.com/${{ github.repository }}/actions/artifacts/${{ steps.artifact_info_minor.outputs.artifact_id }}"
          node scripts/save-release-to-mongodb.js "$artifactUrl" "minor"
